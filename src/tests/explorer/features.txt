features/state-provider/constants.ts:
`import {$databases, $selectedDatabase, addDatabase, selectDatabase} from "@entities/database";
import {$layers, $selectedLayers, addLayer, selectLayer} from "@entities/layer";
import {$dataset, addDataset} from "@entities/dataset";
import {$properties, $selectedProperties, addProperties, selectProperty} from "@entities/property";
import {
    $toolbarAction,
    $toolbarAnnotate,
    $toolbarReshape,
    annotate,
    applyAction,
    reshape,
    saveAll
} from "@entities/toolbar";
import { $saveAll } from "@entities/toolbar/connectons";


export const ACTIONS = {
    ADD_DATABASE: addDatabase,
    SELECT_DATABASE: selectDatabase,
    ADD_DATASET: addDataset,
    ADD_LAYER: addLayer,
    SELECT_LAYER: selectLayer,
    ADD_PROPERTIES: addProperties,
    SELECT_PROPERTY: selectProperty,
    APPLY_RESHAPE: reshape,
    APPLY_ANNOTATE: annotate,
    APPLY_TOOLBAR_ACTION: applyAction,
    SAVE_ALL: saveAll
}

export const ENTITIES = {
    DATABASES: $databases,
    SELECTED_DATABASE: $selectedDatabase,
    DATASET: $dataset,
    LAYERS: $layers,
    SELECTED_LAYERS: $selectedLayers,
    PROPERTIES: $properties,
    SELECTED_PROPERTIES: $selectedProperties,
    TOOLBAR_RESHAPE: $toolbarReshape,
    TOOLBAR_ANNOTATE: $toolbarAnnotate,
    TOOLBAR_ACTION: $toolbarAction,
    SAVE_ALL: $saveAll
}`

features/state-provider/hooks.ts:
`import {useEffect, useRef} from "react";
import {useStore} from "effector-react";
import {Action, Entity, ActionPayload, EntityPayload} from "./types";
import {ACTIONS, ENTITIES} from "./constants";

export const useEventProvider = () => {
    const observers = useRef([]);

    useEffect(() => {
        return () => {
            observers.current.forEach(observer => {
                observer.unsubscribe();
            });
        }
    }, []);

    const emit = <T extends Action, P extends ActionPayload<T>>(action: T, payload?: P): void => {
        if (!ACTIONS[action]) return;

        if (payload) //@ts-ignore
            ACTIONS[action](payload);
        else //@ts-ignore
            ACTIONS[action]();
    }

    const observe = <T extends Entity, P extends EntityPayload<T>>(
        entity: T,
        callback: (payload: P) => void
    ): void => {
        //@ts-ignore
        const unwatch = ENTITIES[entity].watch((data: P) => {
            callback(data);
        });

        observers.current.push(unwatch);
    }

    return {emit, observe};
}

export const useStoreProvider = <T extends Entity, R extends EntityPayload<T>>(entity: T): R => {
    //@ts-ignore
    const data = useStore(ENTITIES[entity]);
    //@ts-ignore
    return data;
}`

features/state-provider/index.ts:
`export * from './hooks';`

features/state-provider/types.ts:
`import {Event, Store} from "effector";
import {ACTIONS, ENTITIES} from "./constants";

export type Action = keyof typeof ACTIONS;
export type Entity = keyof typeof ENTITIES;

export type ActionPayload<T extends Action> = typeof ACTIONS[T] extends Event<infer P> ? P : never;
export type EntityPayload<T extends Entity> = typeof ENTITIES[T] extends Store<infer M> ? M : never;`